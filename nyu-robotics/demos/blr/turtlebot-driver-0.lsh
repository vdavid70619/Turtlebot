;; Simple driver using straigh-line paths and collision detection.
(libload "turtlebot/turtlebot")
(libload "libc/constants")

#? (turtlebot-driver-0-cpp-dummy)
;; Load cpp includes.
(de turtlebot-driver-0-cpp-dummy ()
  (cpheader "#include \"turtlebot/turtlebot.h\"")
  ())

(defclass turtlebot-driver-0 object
  ((-obj- (turtlebot)) tb)
  ((-float-) vlin-max) ;; Max linear velocity.
  ((-float-) vang-max) ;; Max angular velocity.
  ((-float-) vlin-cur) ;; Current linear velocity (robot X-axis).
  ((-float-) vang-cur) ;; Current angular velocity (robot Z-axis).
  ((-idx1- (-float-)) near-check-dim) ;; Dimensions of near collision box.
  ((-float-) tb-height)               ;; Safe clearance for height.
  ((-float-) tb-drive-height)         ;; Safe driving height.
  ((-int-) drive-state)
  )

;; Notes:
;;  - Another way to detect that the robot is near collision with an object is
;;    to test the proportion of points that are NaN in the dense point cloud.
;;    When the camera is <1m from an occluding surface, the points will all be
;;    NaN since surfaces <1m produce no measurements. A highly occluded depth
;;    image is a strong signal that the robot should stop moving.

(defconstant "DRIVE_STATE_NORMAL" 0)
(defconstant "DRIVE_STATE_SCAN" 1)
(defconstant "DRIVE_STATE_PANIC" 2)
(defconstant "DRIVE_CMD_RIGHT" 1)
(defconstant "DRIVE_CMD_LEFT" -1)
(defconstant "DRIVE_CMD_STRAIGHT" 0)

#? (new turtlebot-driver-0 <tb> <vlin-max> <vang-max>
;; Initialize a turtlebot driver with linear and angular speed limits.
;;(defmethod turtlebot-driver-0 turtlebot-driver-0 (tb- vlin-max- vang-max-)
(defmethod turtlebot-driver-0 turtlebot-driver-0 (tb- vlin-max- vang-max-)
  ((-obj- (turtlebot)) tb-)
  ((-float-) vlin-max-)
  ((-float-) vang-max-)
  (setq tb tb-)
  (setq vlin-max vlin-max-)
  (setq vang-max vang-max-)
  (setq vlin-cur 0)
  (setq vang-cur vang-max)
  (setq near-check-dim [f 1.0 0.55])
  (setq tb-height 0.5)
  (setq tb-drive-height 0.1)
  ;; Init driving modes. Start by scanning.
  (setq drive-state @DRIVE_STATE_SCAN)
  )

#? (==> <turtlebot-driver-0> check-near-obstacles <cm> <cm-rgb>)
;; Check in the near-collision box for obstacles and emit a code indicating
;; whether or not obstacles are detected. The code indicates the direction
;; that the robot should pivot in order to avoid the obstacle.
(defmethod turtlebot-driver-0 check-near-obstacles (cm cm-rgb)
  ((-obj- (cost-map)) cm)
  ((-idx3- (-int-)) cm-rgb)
  ;; Check the immediate vicinity of the robot for obstacles.
  ;; If there are obstacles, then we will enter drive-state-scan.
  (let* ((near-collision ())
         (near-check-half-dim-cells (idx-div (idx-div near-check-dim [f 2 2]) :cm:scale))
         (c-idx-begin (- (:cm:center 1) (near-check-half-dim-cells 1)))
         (c-idx-end (+ (:cm:center 1) (near-check-half-dim-cells 1)))
         (c-idx c-idx-begin)
         (row-torques (float-matrix-nc (- c-idx-end c-idx-begin)))
         (r-idx-begin (:cm:center 0))
         (r-idx-end (- (- (:cm:center 0) (* 2 (near-check-half-dim-cells 0))) 1))
         (near-torques (float-matrix (- r-idx-begin r-idx-end)))
         (r-idx r-idx-begin))
    (idx-bloop ((torque near-torques))
      (idx-clear row-torques)
      (setq c-idx c-idx-begin)
      ;; Compute torque for the image row.
      (idx-bloop ((px-torque row-torques))
        (let ((lever-len (- c-idx (:cm:center 1)))
              (cost (:cm:data r-idx c-idx 0)))
          (if (= @COST_MAP_INF_COST cost)
            ;; No torque for no points.
            (progn
              ;; Paint this square light blue.
              (cm-rgb r-idx c-idx 0 128)
              (cm-rgb r-idx c-idx 1 128)
              (cm-rgb r-idx c-idx 2 255)
              (px-torque 0) ;; No torque!
              )

            ;; Check for a collision using
            ;;   (cost < tb-drive-height) or (cost > tb-height).
            (if (or (< cost tb-drive-height) (> cost tb-height))
              (px-torque 0)

              ;; Red visual (for a hit).
              (setq near-collision t)
              (let ((color (min 255 (max 0 (* (/ cost (* 2 tb-height)) 255)))))
                (cm-rgb r-idx c-idx 0 color)
                (cm-rgb r-idx c-idx 1 0)
                (cm-rgb r-idx c-idx 2 0)
                )
              ;; Compute torque at this index.
              (px-torque (* lever-len cost))
              )
            )
          )
        (incr c-idx)
        )
      ;; Increment next row and return sum of torques.
      (setq r-idx (- r-idx 1))
      (torque ((idx-sum row-torques)))
      )
    ;;(printf ":cm:pcl-density %f\n" :cm:pcl-density)
    (if (or near-collision (< :cm:pcl-density 0.4))
      ;; Go  right for negative torque, left otherwise.
      (if (< ((idx-sum near-torques)) 0) @DRIVE_CMD_RIGHT @DRIVE_CMD_LEFT)
      ;; No near collision ==> zero.
      @DRIVE_CMD_STRAIGHT
      )
    )
  )

#? (==> <turtlebot-driver-0> drive <cm> <cm-rgb>)
;; Drive the robot based on the given cost-map <cm>. The RGB image <cm-rgb> is
;; used for debug output.
(defmethod turtlebot-driver-0 drive (cm cm-rgb)
  ((-obj- (cost-map)) cm)
  ((-idx3- (-int-)) cm-rgb)
  ;; We always check the near obstacle code no matter what since obstcles near
  ;; to the robot are a consistent threat.
  (let ((near-obstacle-code (==> this check-near-obstacles cm cm-rgb))
        (state-before drive-state))
    (cond 
      ((= @DRIVE_STATE_NORMAL drive-state)
        ;; TODO(reissb) -- 20120311 -- Use map data from the distance to predict
        ;;   collisions and avoid them.

        ;; Drive straigt unless there are obstacles nearby.
        (if (= @DRIVE_CMD_STRAIGHT near-obstacle-code)
          ;; Go forward.
          (progn (setq vlin-cur vlin-max) (setq vang-cur 0))

          ;; Else scan using obstacle direction.
          (printf "CH_CMD - DRIVE_STATE_SCAN : ")
          (setq vlin-cur 0)
          (setq vang-cur (if (= @DRIVE_CMD_RIGHT near-obstacle-code)
                           (progn (printf "SCAN-RIGHT\n") (* -1 vang-max))
                           (printf "SCAN-LEFT\n") vang-max))
          (setq drive-state @DRIVE_STATE_SCAN)
          )
        ()
        )
      ((= @DRIVE_STATE_SCAN drive-state)
        ;; TODO(reissb) -- 20120311 -- Detect if we are stuck in scan mode
        ;;   and enter panic mode instead?

        ;; Return to normal state if there are no obstacles. Otherwise
        ;; continue scanning in the current direction.
        (if (= @DRIVE_CMD_STRAIGHT near-obstacle-code)
          (progn (printf "CH_CMD - DRIVE_STATE_NORMAL\n")
                 (setq drive-state @DRIVE_STATE_NORMAL))
          )
        ()
        )
      ((= @DRIVE_STATE_PANIC drive-state)
        ;; Do nothing. Stillness is panic signal.
        (setq vlin-cur 0)
        (setq vang-cur 0)
        ()
        )
      )
    ;; Only move when not changing states.
    (if (= state-before drive-state)
      (let ((linear [d 0 0 0])(angular [d 0 0 0]))
        (linear 0 vlin-cur)
        (angular 2 vang-cur)
        (printf "  :cm:pcl-density %f\n" :cm:pcl-density)
        (printf "  publish-cmd-vel [%f 0 0] [0 0 %f]\n" vlin-cur vang-cur)
        (==> tb publish-cmd-vel linear angular)
        )
      )
    )
  ()
  )

#? (de turtlebot-driver-0-test <tb> <n>)
;; Test simple driving for n frames.
(de turtlebot-driver-0-test (tb n)
  ;; A valid turtlebot is required.
  (if (not tb)
    (printf "Error : turtlebot is NULL\n")

    ;; Initialize streams (no harm to repeat this).
    (==> tb start-sub-camera-depth-points)
    (==> tb start-pub-cmd-vel)
    ;; Create feature, cost, and cost rgb maps.
    (let* ((fm (new feature-map [i 100 100] [f 0.02 0.02] 3))
           (cm (new cost-map fm))
           (cm-rgb (int-matrix (:cm:full-dim 0) (:cm:full-dim 1) 3))
           ;;(driver (new turtlebot-driver-0 tb 0.4 0.4))
           (driver (new turtlebot-driver-0 tb 1.0 1.0))
           )
      ;; Create properly sized window if it doesn't exist.
      (if (not window) (
        let ((wnd-width 0)(wnd-height 0))
          (setq wnd-width (* 2 (idx-dim cm-rgb 1)))
          (setq wnd-height (* 2 (idx-dim cm-rgb 0)))
          (new-window 0 0 wnd-width wnd-height)
          )
        )
      ;; Do n loops of driving.
      (for (i 0 (- n 1))
        ;; Grab new depth data.
        (while (< (==> tb update-camera-depth-points) 0) ())
        ;; Convert points to feature map.
        (xyz2feature-map :tb:camera-depth-points turtlebot-c2v fm)
        (progn (feature-map2cost-map :fm:data :cm:data)
               (setq :cm:pcl-density :fm:pcl-density))
        (cost-map2rgb 0.5 cm cm-rgb)
        (==> driver drive cm cm-rgb)
        ;; Draw maps.
        (rgb-draw-matrix 0 0 cm-rgb 2 2)
        )
      :driver:drive-state
      )
    )
  ()
  )

(dhc-make-with-c++ () ()
  turtlebot-driver-0-cpp-dummy
  (turtlebot-driver-0
    turtlebot-driver-0
    check-near-obstacles
    drive
    )
  )

