;; A Library to manipulate point clouds

(libload "libidx/idx-float")
(defparameter thisdir (dirname file-being-loaded))

#? turtlebot-c2v
;; kinect-to-vehicle transformation matrix for standard Turtlebot.
;; Element (0,3) is the negative distance (in meters) between the 
;; kinect sensor and the center of the robot along the forward axis.
;; element (2,3) is the negative height of the kinect sensor above the
;; ground.
(defparameter turtlebot-c2v [f [0 0 1 -0.10] [1 0 0 -0.01] [0 1 0 -0.29]])

(defparameter identity [f [1 0 0 0] [0 1 0 0] [0 0 1 0]])

#? kinect-rcd2xyz
;; parameters to transform row-colum-depth data from 
;; the kinect to xyz coordinates.
;; fx_d1: factor from column number to x coordinate
;; fy_d1: factor from row number of y coordinate
;; cx_d: column number of optical center
;; cy_d: row number of optical center.
;; numbers are from http://nicolas.burrus.name/index.php/Research/KinectCalibration
;; Formula is:
;; z = conversion from raw depth to meters.
;; x = (x_d - cx_d) * z * fx_d1
;; y = (y_d - cy_d) * z * fy_d1
(defparameter kinect-rcd2xyz [f 0.0016828944 0.0016919313 339.30780975 242.73913761])

;; compute lookup table for raw depth to meter conversion.
;; http://groups.google.com/group/openkinect/browse_thread/thread/31351846fd33c78/e98a94ac605b9f21?lnk=gst&q=stephane#e98a94ac605b9f21
(de fill-depth-lookup (d2m-lookup)
  (let* ((k1 1.1863) (k2 2842.5) (k3 0.1236) (i 0))
    (idx-bloop ((k d2m-lookup))
      (k (* k3 (tan (+ (/ i k2) k1))))
      (incr i))) ())

#? kinect-d2m
;; raw kinect depth to meter conversion lookup table.
(defparameter kinect-d2m (float-matrix 2048))
(fill-depth-lookup kinect-d2m)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#? (pcloud-image2cloud <c2v> <image> <depth> <cutoff> <rgb> <rcd> <cxyz> <vxyz>)
;; make a point cloud out of an RGB and a depth image.
;; <image> is the RGB image from the sensor.
;; <depth> is the depth image.
;; <c2v> is the camera to vehicle transformation matrix (3x4 idx2 of floats).
;; <cutoff> is the depth above which points are ignored.
;; The output is written in <rgb>, <rcd>, <cxyz>, <vxyz> which are
;; all Nx3 idx of floats, where N is the number of valid disparity pixels. 
;; RCD contains the row/column/depth values, cXYZ the camera-relative
;; XYZ values, and vXYZ the vehicle-relative XYZ values.
;; for each point in the point cloud.
;; the number of points in the cloud is returned.
;; CAUTION: the output idx are not narrowed to size <n>. This must be
;; done in the calling functions.
(de pcloud-image2cloud (transform image depth dcutoff rgb rcd cxyz vxyz)
  ((-idx2- (-float-)) transform)
  ((-idx3- (-ubyte-)) image)
  ((-idx2- (-short-)) depth)
  ((-float-) dcutoff)
  ((-idx2- (-float-)) rgb rcd cxyz vxyz)
  (let ((r (select image 2 0))
	(g (select image 2 1))
	(b (select image 2 2))
	(omod0 (idx-modulo rgb 0))
	(n (* (idx-dim depth 0) (idx-dim depth 1))))
    ((-int-) omod0 n)
    (idx-f2resize rgb n 3)
    (idx-f2resize rcd n 3)
    (idx-f2resize cxyz n 3)
    (idx-f2resize vxyz n 3)
    (setq n 0)
    #{{ float *rgb=IDX_PTR($rgb,float);
        float *rcd=IDX_PTR($rcd,float);
        float *cxyz=IDX_PTR($cxyz,float);
        float *vxyz=IDX_PTR($vxyz,float);
        float fd;
        float *tr  = IDX_PTR($transform,float);
       #}
       (cidx-bloop ("i" "j" ("r" r) ("g" g) ("b" b) ("d" depth))
          #{  fd = *d;
              if ((fd <= $dcutoff)&&( fd > 0.0)) { 
                rgb[0] = (float)(*r); rgb[1] = (float)(*g); rgb[2] = (float)(*b);
  	        rcd[0] = (float)(i); rcd[1] = (float)(j); rcd[2] = (float)(*d);
                pcloud_rcd2xyz(i,j,fd,cxyz);
	        vxyz[0] = tr[0]*cxyz[0] + tr[1]*cxyz[1] + tr[2]*cxyz[2] + tr[3];
	        vxyz[1] = tr[4]*cxyz[0] + tr[5]*cxyz[1] + tr[6]*cxyz[2] + tr[7];
                vxyz[2] = tr[8]*cxyz[0] + tr[9]*cxyz[1] +tr[10]*cxyz[2] + tr[11];
                rgb += $omod0; rcd += $omod0; cxyz += $omod0; vxyz += $omod0; $n++;
              } 
          #})
       #{ } #}
       (idx-f2resize rgb n 3)
       (idx-f2resize rcd n 3)
       (idx-f2resize cxyz n 3)
       (idx-f2resize vxyz n 3)
       n))


#? (pcloud-image2rcdrgb <image> <depth> <cutoff> <rgb> <rcd>)
;; make a point cloud out of an RGB and a depth image.
;; <image> is the RGB image from the sensor.
;; <depth> is the depth image.
;; <cutoff> is the depth above which points are ignored.
;; The output is written in <rgb>, <rcd>, which are
;; all Nx3 idx of floats, where N is the number of valid disparity pixels. 
;; RCD contains the row/column/depth values, cXYZ the camera-relative
(de pcloud-image2rcdrgb (image depth dcutoff rcd rgb)
  ((-idx3- (-ubyte-)) image)
  ((-idx2- (-short-)) depth)
  ((-short-) dcutoff)
  ((-idx2- (-float-)) rcd rgb)
  (when (< (idx-dim image 2) 3) (error "image has less than 3 channels"))
  (let ((r (select image 2 0))
	(g (select image 2 1))
	(b (select image 2 2))
	(rgbmod (idx-modulo rgb 0))
	(rcdmod (idx-modulo rcd 0))
	(n (* (idx-dim depth 0) (idx-dim depth 1))))
    ((-int-) rcdmod rgbmod n)
    (idx-f2resize rgb n 3)
    (idx-f2resize rcd n 3)
    (setq n 0)
    #{{ float *rgb=IDX_PTR($rgb,float);
        float *rcd=IDX_PTR($rcd,float);
       #}
       (cidx-bloop ("i" "j" ("r" r) ("g" g) ("b" b) ("d" depth))
          #{ short rawdepth = *d;
             if (rawdepth < $dcutoff ) { 
               rgb[0] = (float)(*r); rgb[1] = (float)(*g); rgb[2] = (float)(*b);
 	       rcd[0] = (float)(i); rcd[1] = (float)(j); rcd[2] = (float)(rawdepth);
	       // printf("i %d: %g %g %g\n",$n,rcd[0],rcd[1],rcd[2]);
               rgb += $rgbmod; rcd += $rcdmod; $n++;
	     } #})
       #{ } #}
       (idx-f2resize rgb n 3)
       (idx-f2resize rcd n 3)
       n))

#? (pcloud-rcd2xyz <rcd> <xyz> <parameters> <transform>)
;; Turn an RCD point cloud into an XYZ point cloud
;; <d2m> is a lookup table from raw depth to meters,
;; <rcd2xyz> is an idx1 of floats containing calibration parameters 
;; for the RCD to XYZ transformation (fx_d1, fy_d1, cx_d, and cy_d).
;; <transform> is a transformation matrix from camera
;; to whatever frame of reference is desired.
;; <xyz> is automatically resized to the proper size.
(de pcloud-rcd2xyz (rcd xyz d2m rcd2xyz transform)
  ((-idx2- (-float-)) rcd)
  ((-idx2- (-float-)) xyz)
  ((-idx1- (-float-)) d2m)
  ((-idx1- (-float-)) rcd2xyz)
  ((-idx2- (-float-)) transform)
  (when (or (< (idx-dim rcd 0) 3)
	    (<> (idx-dim rcd2xyz 0) 4)
	    (<> (idx-dim d2m 0) 2048)
	    (<> 3 (idx-dim transform 0))
	    (<> 4 (idx-dim transform 1)))
    (error "illegal size for pcloud-transform-cloud"))
  (idx-f2resize xyz (idx-dim rcd 0) 3)
  #{{ float *tr  = IDX_PTR($transform,float);
      float *d2m = IDX_PTR($d2m,float);
      float *rcd2xyz = IDX_PTR($rcd2xyz,float);
      float fx_d1 = rcd2xyz[0];
      float fy_d1 = rcd2xyz[1];
      float cx_d = rcd2xyz[2];
      float cy_d = rcd2xyz[3];
   #}
   (cidx-bloop ("i" ("rcd" rcd) ("xyz" xyz))
   #{{
      float r0, r1, r2;
      float x, y, z;
      float xx = rcd[1], yy=rcd[0], zz=rcd[2];
      if ( (zz<2047.0)&&(zz>=0.0) ) { z = d2m[(int)(zz)]; } else { z = 0; }
      x = (xx - cx_d)*z*fx_d1;
      y = (yy - cy_d)*z*fy_d1;
      r0 = tr[0]*x + tr[1]*y + tr[2]*z + tr[3];
      r1 = tr[4]*x + tr[5]*y + tr[6]*z + tr[7];
      r2 = tr[8]*x + tr[9]*y + tr[10]*z + tr[11];
      xyz[0]=r0; xyz[1]=r1; xyz[2]=r2;
    }#})
   #{ } #}
   ())


#? (inverse-transform <transform> <inverse>)
;; compute the inverse of a 3x4 transformation matrix.
;; Write the result in the 3x4 matrix <inverse>.
;; This assumes that the <transform> is a rotation
;; and a translation (no scaling, skewing, or flipping).
(de pcloud-inverse-transform (transform inverse)
  ((-idx2- (-float-)) transform)
  ((-idx2- (-float-)) inverse)
  ;; inverse of rotation is transpose of rotation
  (let ((rot-inverse (narrow inverse 1 3 0)))
    (idx-copy (transpose (narrow transform 1 3 0)) rot-inverse)
    ;; inverse of translation is minus inverse-rotated translation
    (idx-minus (idx-m2dotm1 rot-inverse (select transform 1 3)) 
	       (select inverse 1 3))) ())


#? (pcloud-transform-point <pointin> <pointout> <transform>)
;; transform a 3D point through a 3x4 transformation
;; matrix in homogeneous coordinates.
(de pcloud-transform-point (pointin pointout transform)
  ((-idx1- (-float-)) pointin)
  ((-idx1- (-float-)) pointout)
  ((-idx2- (-float-)) transform)
  (when (or (<> 3 (idx-dim pointin 0))
	    (<> 3 (idx-dim pointout 0))
	    (<> 3 (idx-dim transform 0))
	    (<> 4 (idx-dim transform 1)))
    (error "illegal size for transform-point"))
  #{{ float *pin = IDX_PTR($pointin,float);
      float *pout= IDX_PTR($pointout,float);
      float *tr  = IDX_PTR($transform,float);
      pout[0] = tr[0]*pin[0] + tr[1]*pin[1] + tr[2]*pin[2] + tr[3];
      pout[1] = tr[4]*pin[0] + tr[5]*pin[1] + tr[6]*pin[2] + tr[7];
      pout[2] = tr[8]*pin[0] + tr[9]*pin[1] + tr[10]*pin[2] + tr[11];
   }#} ())

#? (pcloud-transform <cloud> <transform>)
;; transform a 3D point through a 3x4 transformation
;; matrix in homogeneous coordinates. The transformation
;; is performed in-place
(de pcloud-transform (pcloud transform)
  ((-idx2- (-float-)) pcloud)
  ((-idx2- (-float-)) transform)
  (when (or (< (idx-dim pcloud 0) 3)
	    (<> 3 (idx-dim transform 0))
	    (<> 4 (idx-dim transform 1)))
    (error "illegal size for pcloud-transform-cloud"))
  #{{ float *tr  = IDX_PTR($transform,float);
   #}
   (cidx-bloop ("i" ("pin" pcloud))
   #{{
      float r0, r1, r2;
      r0 = tr[0]*pin[0] + tr[1]*pin[1] + tr[2]*pin[2] + tr[3];
      r1 = tr[4]*pin[0] + tr[5]*pin[1] + tr[6]*pin[2] + tr[7];
      r2 = tr[8]*pin[0] + tr[9]*pin[1] + tr[10]*pin[2] + tr[11];
      pin[0]=r0; pin[1]=r1; pin[2]=r2;
    }#})
   #{ } #}
   ())

(de pcloud-display (px py xyz rgb zoom czx czy)
  (let* ((xxmax 600)
	 (yymax 700)
	 (im (ubyte-matrix yymax xxmax 3)))
    (idx-bloop ((rgb rgb) (xyz xyz))
      (let* ((x (xyz 0)) (y (xyz 1)) (z (xyz 2))
	     (xx (+ px (* zoom (+ (xyz 0) (* czx (xyz 2))))))
	     (yy (+ py (* zoom (+ (xyz 1) (* czy (xyz 2)))))))
	;; (print xx yy)
	(when (and (< xx xxmax) (> xx 0) (< yy yymax) (> yy 0))
	  (im yy xx 0 (rgb 0))
	  (im yy xx 1 (rgb 1))
	  (im yy xx 2 (rgb 2)))))
    im))

(de pcloud-display-rcd (x y rcd rgb zoom)
  (let* ((xxmax 600)
	 (yymax 700)
	 (im (ubyte-matrix yymax xxmax 3)))
    (idx-bloop ((rgb rgb) (rcd rcd))
      (let ((xx (+ x (* zoom (rcd 1))))
	    (yy (+ y (* zoom (rcd 0)))))
	(when (and (< xx xxmax) (> xx 0) (< yy yymax) (> yy 0))
	  (im yy xx 0 (rgb 0))
	  (im yy xx 1 (rgb 1))
	  (im yy xx 2 (rgb 2)))))
    im))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make 
 ()
 #{ 
   // 1.0 / 5.9421434211923247e+02
   #define FX_D 0.0016828944
   // 1.0 / 5.9104053696870778e+02
   #define FY_D 0.0016919313
   // 3.3930780975300314e+02;
   #define CX_D  339.30780975
   // 2.4273913761751615e+02;
   #define CY_D  242.73913761

   // from http://graphics.stanford.edu/~mdfisher/Kinect.html
   float pcloud_depth2meters(int depth) {
       return  1.0 / ((float)(depth) * -0.0030711016 + 3.3309495161);
   }

   void pcloud_rcd2xyz(int y, int x, short d, float *pout) {
     float depth = pcloud_depth2meters(d);
     pout[0] = (float)((x - CX_D) * depth * FX_D);
     pout[1] = (float)((y - CY_D) * depth * FY_D);
     pout[2] = (float)(depth);
   }
 #}
 pcloud-image2cloud
 pcloud-image2rcdrgb
 pcloud-rcd2xyz
 pcloud-inverse-transform
 pcloud-transform-point
 pcloud-transform
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(de pctest ()
  (libload (concat thisdir "/../freenect/freenect"))
  (when (not window) (new-window 0 0 1280 1000 "asd"))
  (let* ((q (new freenect 0))
	 (d (float-matrix 480 640))
	 (rgb (float-matrix 307200 3))
	 (rcd (float-matrix 307200 3))
	 (cxyz (float-matrix 307200 3))
	 (vxyz (float-matrix 307200 3))
	 (stop ())
	 (dx 100)
	 (dy 500)
	 (cx 0.1)
	 (cy -0.1)
	 (zoom 300)
	 (cv 0) (cd 0))
    (==> q update)
    (setq cv :q:rgb-frames)
    (setq cd :q:depth-frames)
    (while (not stop)
      (==> q update)
      (let ((image (==> q get-rgb))
	    (rawd (==> q get-depth)))
	(rgb-draw-matrix 0 0 image)
	;; (pcloud-image-to-cloud turtlebot-c2v image rawd 2000 rgb rcd cxyz vxyz)
	(pcloud-image2rcdrgb image rawd 2000 rcd rgb)
	;; (print (idx-dim rcd 0) (idx-dim rcd 1))
	(pcloud-rcd2xyz rcd cxyz kinect-d2m kinect-rcd2xyz identity)
	(process-depth rawd d)
	(rgb-draw-matrix 0 480 d)
	;; (print ((idx-inf rawd)) ((idx-sup rawd)))
	;; (pause "asd")
	;; (rgb-draw-matrix 644 4 (pcloud-display-rcd 0 0 rcd rgb 1))
	(rgb-draw-matrix 644 4 (pcloud-display dx dy cxyz rgb zoom cx cy))
	(setq cv :q:rgb-frames)
	(setq cd :q:depth-frames)))))

