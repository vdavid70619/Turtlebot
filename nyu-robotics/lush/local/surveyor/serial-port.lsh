;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; low-level serial port functions

#? * low-level serial port functions for Surveyor communication


#? (serialport-open-port <port> <timeout>) 
;; open serial port <port> (e.g. <"/dev/ttyUSB0">)
;; for reading and writing. <timeout> is the
;; maximum time a read will wait for characters
;; before returning (in 1/10 of a second).
;; Returns a file descriptor on the serial port.
;; The port is open at 9600 bauds,
;; with 8 bits of data, no parity, one stop bit.
(de serialport-open-port (port timeout) 
  ((-str-) port)
  ((-int-) timeout)
  (let ((fd 0))
    ((-int-) fd)
    #{ {struct termios  term;
        $fd = open( $port->data, O_RDWR + O_NOCTTY + O_NONBLOCK);
        if ($fd < 0) { 
          printf("port=[%s]\n",(unsigned char *)($port->data));
          error(NIL,"could not open serial port",NIL); 
        }
        if(ioctl($fd, TIOCEXCL) == -1) {
          close($fd);
          error(NIL,"cannot set exclusive access to serial port",NIL);
        }
        // if(fcntl($fd, F_SETFL, FNDELAY) == -1) 
        if(fcntl($fd, F_SETFL, 0) == -1) {
          close($fd);
          error(NIL,"cannot set blocking IO on serial port",NIL);
        }
        tcgetattr($fd ,&term);  
        cfsetispeed(&term, B9600);
        cfsetospeed(&term, B9600);
        term.c_cflag |= (CLOCAL | CREAD);
        term.c_cflag &= ~PARENB;
        term.c_cflag &= ~CSTOPB;
        term.c_cflag &= ~CSIZE;
        term.c_cflag |= CS8;
        term.c_cflag &= ~CRTSCTS;
        term.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
        term.c_iflag |= (IGNBRK | IGNPAR );
        term.c_iflag &= ~ISTRIP;
        term.c_iflag &= ~(IXON | IXOFF | IXANY);
        term.c_oflag &= ~OPOST;
        term.c_cc[VMIN] = 0;
        term.c_cc[VTIME] = ($timeout);  
        tcsetattr($fd, TCSANOW, &term);
        tcflush($fd, TCIOFLUSH);
    } #} 
    fd))

#? (serialport-close-port <fd>)
;; close file descriptor <fd>.
(de serialport-close-port (fd) ((-int-) fd) #{ close($fd); #} ())

#? (serialport-write-bytes <fd> <c>)
;; write byte <c> to file descriptor <fd>.
;; Returns the number of bytes written.
(de serialport-write-byte (fd c) 
  ((-int-) fd)
  ((-ubyte-) c)
  (to-int #{ write($fd, &$c, 1) #}))

#? (serialport-write-bytes <fd> <buffer> <n>)
;; write <n> bytes from <buffer> (an idx1 of ubytes)
;; to file descriptor <fd>. Returns number of bytes 
;; written.
(de serialport-write-bytes (fd buffer n)
  ((-int-) fd)
  ((-idx1- (-ubyte-)) buffer)
  ((-int-) n)
  (to-int #{ write($fd, IDX_PTR($buffer,unsigned char), $n) #}))

#? (serialport-read-byte <fd>)
;; read one byte from file descriptor <fd>. 
;; Return byte on success, and -1 on failure.
(de serialport-read-byte (fd)
  ((-int-) fd)
  (let ((r -1))
    ((-int-) r)
    #{{ unsigned char c;
        if (0 != read($fd, &c, 1)) $r = c;
     }#} r))
#? (serialport-read-bytes <fd> <buffer> <nmax>)
;; read an maximum of <nmax> bytes from file 
;; descriptor <fd> into <buffer> (which must
;; be an idx1 of ubytes of size at least <nmax>).
(de serialport-read-bytes (fd buffer nmax)
  ((-int-) fd)
  ((-idx1- (-ubyte-)) buffer)
  ((-int-) nmax)
  (when (> nmax (idx-dim buffer 0)) (error "buffer too short"))
  (let ((total 0))
    ((-int-) total)
    #{{ unsigned char *p;
        int n;
        p = IDX_PTR($buffer,unsigned char);
        while ( ($total < $nmax) && ( 0 != (n = read($fd, p, $nmax-$total))) ) { 
          p += n, $total += n; 
        }
     }#} total))

#? (serialport-read-pound <fd> <nmax>)
;; read characters from file descriptor <fd>
;; until a hash/pound '#' charactera is found,
;; or until <nmax> characters have been read.
;; returns the number of characters read.
;; If the return value is equal to <nmax+1>,
;; no hash character was found.
(de serialport-read-pound (fd nmax)
  ((-int-) fd)
  ((-int-) nmax)
  (let ((i 0))
    ((-int-) i)
    #{{ unsigned char c;
        do { read($fd, &c, 1); $i++; } while ( (c != '#') && ($i < $nmax));
    } #} i))
     
#? (serialport-read-line <fd> <buffer>)
;; read an entire line of characters from <fd>
;; into <buffer> (in idx1 of ubytes), until
;; a line feed character (decimal ascii code 10) 
;; is found.
(de serialport-read-line (fd buffer)
  ((-int-) fd)
  ((-idx1- (-ubyte-)) buffer)
  (let ((mx (idx-dim buffer 0))
	(n 0))
    ((-int-) n mx)
    #{  unsigned char *ptr;
        ptr = IDX_PTR($buffer,unsigned char);
        do {
          read($fd, ptr++, 1);
          // printf("%05d: %d\n",$n,*(ptr-1));
          ($n)++;
        } while ( (*(ptr-1) != 10) && ($n < $mx-1) );
        read($fd, ptr++, 1);
        if ( *(ptr-1) != 10 ) { printf("WARNING: missing LF\n"); }
     #} n))
  
#? (serialport-flush <fd>)
;; read and drop all the the pending bytes, emptying the buffer
;; return number of bytes read.
(de serialport-flush (fd)
  ((-int-) fd)
  (let ((cnt 0))
    ((-int-) cnt)
    #{{ int  rc;
        unsigned char buf[8];
        if (fcntl($fd,F_SETFL,O_NONBLOCK) == -1) { error(NIL,"cannot set non-blocking io",NIL);}
        do {
          rc = read($fd, buf, 8);
          printf("%d ",rc); fflush(stdout);
          $cnt += rc;
        } while ( rc == 8 );
       if (fcntl($fd,F_SETFL,0) == -1) { error(NIL,"cannot set blocking io",NIL);}
       if (rc < 0) {
            // Read error
            printf("\nrc=%d", rc);
            error(NIL,"error on read",NIL);
       }
      }
    #}
    cnt))

#? (write-ubytes-to-file <f> <m>)
;; write all bytes in <m> (and idx1 of ubytes)
;; to file <f>. <f> is a filename string.
(de write-ubytes-to-file (f m)
  ((-str-) f)
  ((-idx1- (-ubyte-)) m)
  (let* ((n (idx-dim m 0))
	 (r 0))
    ((-int-) n r)
    #{{FILE *fp;
       if ((fp = fopen($f->data, "wb")) != NULL) {
        $r = fwrite(IDX_PTR($m, unsigned char), 1, $n, fp);
        fclose(fp);
       }
    } #} r))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(dhc-make () 
	  #{
	  #include <sys/types.h>
	  #include <sys/stat.h>
	  #include <sys/ioctl.h>
	  #include <time.h>
	  #include <fcntl.h>
	  #include <termios.h>
	  #include <stdio.h>
	  #include <errno.h>
	  #include <unistd.h>
	  #}
	  serialport-close-port serialport-open-port
	  serialport-write-byte serialport-write-bytes
	  serialport-read-byte
	  serialport-read-bytes 
	  serialport-read-pound
	  serialport-read-line
	  serialport-flush
	  write-ubytes-to-file)



