(libload "libc/make")


(defclass biquad object ((-gptr-) p))

#? (new biquad <type> <f0> <q> <fs>)
;; Create and initialize a biquad filter.
;; <type>: 1 for high pass, 0 for low pass;
;; <f0>: cutoff frequency; 
;; <q>: resonance;
;; <fs>: sampling frequency of signal.
(defmethod biquad biquad (type f0 q fs)
  ((-int-) type)
  ((-float-) f0 q fs)
  (setq p (to-gptr #{ malloc(sizeof(Biquad)) #}))
  #{ BiquadSet((Biquad*)($p),$type,$f0,$q,$fs); #}
  ())

(defmethod biquad -destructor ()
  (when p #{ free($p) #} ())
  (setq p (to-gptr ())))

#? (==> <biquad> clear)
;; reset the state of the biquad filter to zero
(defmethod biquad clear () #{ BiquadClear((Biquad*)($p)); #} ())

#? (==> <biquad> run <input> <output>)
;; runs the biquad filter in a buffer of data
;; stored in idx1-float <input>, and put result
;; in idx1-float <output>. This method can be called
;; multiple times on successive segments of signals
;; as the filter remembers its state.
(defmethod biquad run (input output)
  ((-idx1- (-float-)) input)
  ((-idx1- (-float-)) output)
  (let ((n (idx-dim input 0)))
    (if (< (idx-dim output 0) n)
	(error "output array is too small")
      #{ BiquadRun((Biquad*)($p),$n,IDX_PTR($input,float),IDX_PTR($output,float)); #}
      ())))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(let* ((cmd dhc-make-command)
       (dir (concat-fname (dirname file-being-loaded) "biquad"))
       (lm (new lushmake dir)) )
  (==> lm rule "biquad.o" '("biquad.c" "biquad.h") cmd)
  (==> lm make)
  (==> lm load) )

(let* ((dir (concat-fname (dirname file-being-loaded) "biquad"))
       ;; have to make gcc believe that sincosf is undefined so it will load it
       ;; because it is not already there in the Lush executable, somehow.
       (dhc-make-lushflags (concat dhc-make-lushflags " -I" dir " -u sincosf")) )
  (dhc-make-with-libs 
   ()
   "/usr/lib/i386-linux-gnu/libm.so"
   #{ #include "biquad.h" #}
   (biquad biquad -destructor clear run)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; test the low-pass and high-pass biquad filter
;; in a compound signal with two sinusoidal
;; components at 10 and 50 hertz, with a low
;; pass and high pass at 30 hertz.
;; sampling frquency is 1kHz.
(de biquad-filter-test ()
  (let* ((2pi 6.2832)
	 (input (fmatrix 1024))		; input signal array
	 (outputlp (fmatrix 1024))	; output of low-pass filter
	 (outputhp (fmatrix 1024))	; output of high-pass filter
	 (fs 1000) 			; sampling frequency
	 (f1 10) 			; frequency of 1st sinusoid
	 (f2 50) 			; frequency of 2nd sinusoid
	 (lp (new biquad 0 30 1 fs))	; low-pass biquad
	 (hp (new biquad 1 30 1 fs)))	; high-pass biquad
    (new-window 0 0 1024 600 "biquad")

    ;; fill up input with sum of two sinusoids
    (for (i 0 (- (idx-dim input 0) 1))
	 (input i (* 0.5 (+ (sin (* 2pi i (/ f1 fs))) (sin (* 2pi i (/ f2 fs)))))))

    ;; apply filters to the input array. 
    (==> lp run input outputlp)
    (==> hp run input outputhp)
    ;; display results
    (for (i 1 (- (idx-dim input 0) 1))
	 (draw-line (- i 1) (+ 100 (* 90 (input (- i 1)))) i (+ 100 (* 90 (input i))))
	 (draw-line (- i 1) (+ 300 (* 90 (outputlp (- i 1)))) i (+ 300 (* 90 (outputlp i))))
	 (draw-line (- i 1) (+ 500 (* 90 (outputhp (- i 1)))) i (+ 500 (* 90 (outputhp i)))))

    ;; now, apply filter to arrays in multiple chunks (4 chunks)
    ;; This should give the same results as above.
    ;; We use the unfold trick to segment the array.
    (let ((in (unfold input 0 256 256))
	  (outlp (unfold outputlp 0 256 256))
	  (outhp (unfold outputhp 0 256 256)))
      ;; first, clear the filters states.
      (==> lp clear)
      (==> hp clear)
      (idx-bloop ((in in) (outlp outlp) (outhp outhp))
	(==> lp run in outlp)
	(==> hp run in outhp)))
    ;; display results in red. If it overwrites the 
    ;; previous one, then everything worked.
    (color-rgb 1 0 0)
    (for (i 1 (- (idx-dim input 0) 1))
	 (draw-line (- i 1) (+ 300 (* 90 (outputlp (- i 1)))) i (+ 300 (* 90 (outputlp i))))
	 (draw-line (- i 1) (+ 500 (* 90 (outputhp (- i 1)))) i (+ 500 (* 90 (outputhp i)))))
    ))

    