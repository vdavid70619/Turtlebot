;; Welcome to the RosLush Turtlebot module.
;;
;; The module is organized as a set of subscribers and publishers related
;; to the Turtlebot.
;;
;; ***** ALL C++ CODE IS IN turtlebot.h *****
;;
;; ADDING A SUBSCRIBER:
;;   1) Create your traits struct first. The subscriber traits have the
;;      following implicit interface:
;;
;;        struct SubscriberTraits
;;        {
;;          // ROS internal queue depth.
;;          enum { queue_size = SIZE, };
;;          // The ROS message type to receive.
;;          typedef MSG_TYPE msg_type;
;;          // Type passed from Lush. See CopyMsgData() below.
;;          typedef LUSH_CONVERT_TYPE lush_convert_type;
;;          // The ROS subscribe topic name.
;;          static const char* TopicStr();
;;          // Marshall data from ROS to Lush. Note the single parameter
;;          // of type lush_convert_type. To pass multiple pointers from
;;          // lush, define a helper structure.
;;          static void CopyMsgData(const msg_type::ConstPtr& msg,
;;                                  lush_convert_type* data);
;;        };
;;
;;      For convenience, typedef your subscriber traits as in
;;        typedef RosSubscriber<SubscriberTraits> XXXSubscriber;
;;      Note that the established convention is to use the ROS topic name as
;;      the prefix for the subscriber type.
;;
;;   2) Add the subscriber to the RosStreams by inheriting from it as in
;;        class RosStreams : public XXXSubscriber {};
;;   
;;   3) Create the ROS wrapper methods to start and receive from the subscriber.
;;        #? (==> <turtlebot> start-sub-XXX)
;;        ;; Start the XXX subscriber.
;;        (defmethod turtlebot start-sub-XXX ()
;;          (to-int #{ $client->StartSubscriber<XXXSubscriber>() #})
;;          )
;;        
;;        #? (==> <turtlebot> update-XXX)
;;        ;; Update the XXX subscriber.
;;        (defmethod turtlebot update-XXX ()
;;          (to-int #{
;;             $client->Update<XXXSubscriber>(IDX_PTR($XXX_LUSH, DATA_TYPE))
;;             #})
;;          )
;;   
;; ADDING A PUBLISHER:
;;   1) Create your traits struct first. The publisher traits have the
;;      following implicit interface:
;;
;;        struct PublisherTraits
;;        {
;;          // ROS internal queue depth.
;;          enum { queue_size = SIZE, };
;;          // The ROS message type to publish.
;;          typedef MSG_TYPE msg_type;
;;          // Type passed from Lush. See CopyMsgData() below.
;;          typedef LUSH_CONVERT_TYPE lush_convert_type;
;;          // The ROS publish topic name.
;;          static const char* TopicStr();
;;          // Marshall data from Lush to ROS. Note the single parameter
;;          // of type lush_convert_type. To pass multiple pointers from
;;          // lush, define a helper structure.
;;          static void CopyMsgData(const lush_convert_type& data,
;;                                  msg_type* msg);
;;        };
;;
;;      For convenience, typedef your publisher traits as in
;;        typedef RosPublisher<PublisherTraits> XXXPublisher;
;;      Note that the established convention is to use the ROS topic name as
;;      the prefix for the publisher type.
;;
;;   2) Add the publisher to the RosStreams by inheriting from it as in
;;        class RosStreams : public XXXPublisher {};
;;   
;;   3) Create the ROS wrapper methods to start and publish to the publisher.
;;        #? (==> <turtlebot> start-pub-XXX)
;;        ;; Start the XXX publisher.
;;        (defmethod turtlebot start-pub-XXX ()
;;          (to-int #{ $client->StartPublisher<XXXPublisher>() #})
;;          )
;;        
;;        #? (==> <turtlebot> publish-XXX <linear> <angular>)
;;        ;; Publish the XXX message.
;;        (defmethod turtlebot publish-XXX (DATA_0 DATA_1)
;;          ((-idx1- (-double-)) linear)
;;          ((-idx1- (-double-)) angular)
;;          #{
;;            $client->Publish<XXXPublisher>(
;;              XXXPublisher::lush_convert_type(IDX_PTR($DATA_0, DATA_0_TYPE),
;;                                              IDX_PTR($DATA_1, DATA_1_TYPE)));
;;          #}
;;          ()
;;          )
;;
;;      In the previous example, we create a temporary instance of
;;      the lush_convert_type to pass data from Lush to ROS. This is the
;;      established pattern when dealing with multiple parameters within the
;;      wrapper interfaces.
;;        
;;   

(libload "ros/ros")

;; Set include roslush path.
(let* ((dir (dirname file-being-loaded)))
  (setq c-include-path (cons (concat dir
                             "/..") c-include-path))
  )

;; Add include paths for roscpp.
(setq c-include-path (cons (concat (rospath "roscpp")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rostime")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "rosconsole")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "cpp_common")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_serialization")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "roscpp_traits")
                           "/include") c-include-path))
(setq c-include-path (cons (concat (rospath "xmlrpcpp")
                           "/src") c-include-path))
;; Include paths for messages.
(setq c-include-path (cons (concat (rospath "std_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "sensor_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "geometry_msgs")
                           "/msg_gen/cpp/include") c-include-path))
(setq c-include-path (cons (concat (rospath "nav_msgs")
                           "/msg_gen/cpp/include") c-include-path))

#? turtlebot-c2v
;; Transformation from Kinect to Turtlebot base.
(defparameter turtlebot-c2v [f [0 0 1 -0.10] [1 0 0 -0.01] [0 1 0 -0.25] [0 0 0 1]])

#? (turtlebot-dummy)
;; Setup global includes for turtlebot.
(de turtlebot-dummy ()
  (cpheader "#include \"turtlebot/turtlebot.h\"")
  ())

#? turtlebot
;; Control interface for the ROS turtlebot.
(defclass turtlebot object
  ((-gptr- "RosClient*") client)
  ;; Depth image.
  ((-idx2- (-short-)) camera-depth-image-raw)
  ;; Odometry.
  ((-idx1- (-double-)) odom-pose-position)
  ((-idx1- (-double-)) odom-pose-orientation)
  ((-idx1- (-double-)) odom-pose-covariance)
  ((-idx1- (-double-)) odom-twist-linear)
  ((-idx1- (-double-)) odom-twist-angular)
  ((-idx1- (-double-)) odom-twist-covariance)
  ;; Pose EKF.
  ((-idx1- (-double-)) robot-pose-ekf-position)
  ((-idx1- (-double-)) robot-pose-ekf-orientation)
  ((-idx1- (-double-)) robot-pose-ekf-covariance)
  ;; Depth points (XYZ).
  ((-idx2- (-float-)) camera-depth-points)
  )

#? (new turtlebot)
(defmethod turtlebot turtlebot ()
  (setq client (to-gptr #{ new RosClient() #}))
  ;; Depth image.
  (setq camera-depth-image-raw (short-matrix 480 640))
  ;; Odometry.
  (setq odom-pose-position (double-matrix 3))
  (setq odom-pose-orientation (double-matrix 4))
  (setq odom-pose-covariance (double-matrix 36))
  (setq odom-twist-linear (double-matrix 3))
  (setq odom-twist-angular (double-matrix 3))
  (setq odom-twist-covariance (double-matrix 36))
  ;; Robot pose EKF.
  (setq robot-pose-ekf-position (double-matrix 3))
  (setq robot-pose-ekf-orientation (double-matrix 4))
  (setq robot-pose-ekf-covariance (double-matrix 36))
  ;; Depth points (XYZ).
  (setq camera-depth-points (float-matrix (* 480 640) 3))
  ()
  )

#? (delete <turtlebot>)
(defmethod turtlebot -destructor ()
  #{ delete $client; #}
  ()
  )

#? (==> <turtlebot> start-sub-camera-depth-image-raw)
;; Start the camera depth image_raw subscriber.
(defmethod turtlebot start-sub-camera-depth-image-raw ()
  (to-int #{ $client->StartSubscriber<CameraDepthImageRawSubscriber>() #})
  )

#? (==> <turtlebot> update-camera-depth-image-raw)
;; Update the camera depth image_raw subscriber.
(defmethod turtlebot update-camera-depth-image-raw ()
  (let ((result -1)) ((-int-) result)
    #{typedef CameraDepthImageRawSubscriber::lush_convert_type DataType;
      DataType* data = IDX_PTR($camera_depth_image_raw, int_least16_t);
      $result = $client->Update<CameraDepthImageRawSubscriber>(data);
      #}
    result
    )
  )

#? (==> <turtlebot> start-sub-odom)
;; Start the odometry subscriber.
(defmethod turtlebot start-sub-odom ()
  (to-int #{ $client->StartSubscriber<OdomSubscriber>() #})
  )

#? (==> <turtlebot> update-odom)
;; Update the odometry subscriber.
(defmethod turtlebot update-odom ()
  (let ((result -1)) ((-int-) result)
    #{typedef OdomSubscriber::lush_convert_type DataType;
      DataType data(IDX_PTR($odom_pose_position, double),
                    IDX_PTR($odom_pose_orientation, double),
                    IDX_PTR($odom_pose_covariance, double),
                    IDX_PTR($odom_twist_linear, double),
                    IDX_PTR($odom_twist_angular, double),
                    IDX_PTR($odom_twist_covariance, double));
      $result = $client->Update<OdomSubscriber>(&data);
      #}
    result
    )
  )

#? (==> <turtlebot> start-sub-robot-pose-ekf)
;; Start the robot-pose-ekf subscriber.
(defmethod turtlebot start-sub-robot-pose-ekf ()
  (to-int #{ $client->StartSubscriber<RobotPoseEkfSubscriber>() #})
  )

#? (==> <turtlebot> update-robot-pose-ekf)
;; Update the robot-pose-ekf subscriber.
(defmethod turtlebot update-robot-pose-ekf ()
  (let ((result -1)) ((-int-) result)
    #{typedef RobotPoseEkfSubscriber::lush_convert_type DataType;
      DataType data(IDX_PTR($robot_pose_ekf_position, double),
                    IDX_PTR($robot_pose_ekf_orientation, double),
                    IDX_PTR($robot_pose_ekf_covariance, double));
      $result = $client->Update<RobotPoseEkfSubscriber>(&data);
      #}
    result
    )
  )

#? (==> <turtlebot> start-sub-camera-depth-points)
;; Start the camera depth points subscriber.
(defmethod turtlebot start-sub-camera-depth-points ()
  (to-int #{ $client->StartSubscriber<CameraDepthPointsSubscriber>() #})
  )

#? (==> <turtlebot> update-camera-depth-points)
;; Update the camera depth points subscriber.
(defmethod turtlebot update-camera-depth-points ()
  (let ((result 0)(num-points 0))
    ((-int-) result)
    ((-int-) num-points)
    ;; Fetch point data then resize the structure for this frame.
    #{typedef CameraDepthPointsSubscriber::lush_convert_type DataType;
      DataType data(IDX_PTR($camera_depth_points, float), &$num_points);
      $result = $client->Update<CameraDepthPointsSubscriber>(&data);
      #}
    (idx-changedim camera-depth-points 0 num-points)
    result
    )
  )

#? (==> <turtlebot> start-pub-cmd-vel)
;; Start the cmd_vel publisher.
(defmethod turtlebot start-pub-cmd-vel ()
  (to-int #{ $client->StartPublisher<CmdVelPublisher>() #})
  )

#? (==> <turtlebot> publish-cmd-vel <linear> <angular>)
;; Publish the cmd_vel Twist message. Uses linear and angular velocities.
(defmethod turtlebot publish-cmd-vel (linear angular)
  ((-idx1- (-double-)) linear)
  ((-idx1- (-double-)) angular)
  #{
    $client->Publish<CmdVelPublisher>(
      CmdVelPublisher::lush_convert_type(IDX_PTR($linear, double),
                                         IDX_PTR($angular, double)));
  #}
  ()
  )

(dhc-make-with-c++
  ()
  `(,(concat (rospath "roscpp") "/lib/libros.so"))
  turtlebot-dummy
  (turtlebot
    turtlebot
    -destructor
    ;; Depth image raw.
    start-sub-camera-depth-image-raw
    update-camera-depth-image-raw
    ;; Odom.
    start-sub-odom
    update-odom
    ;; Robot pose EKF.
    start-sub-robot-pose-ekf
    update-robot-pose-ekf
    ;; Depth points (XYZ).
    start-sub-camera-depth-points
    update-camera-depth-points
    ;; Publish cmd_vel.
    start-pub-cmd-vel
    publish_cmd_vel
    )
  )

#? turtlebot-test
;; Create a graphics window and show the raw depth data.
(de turtlebot-test ()
  (let* ((tb (new turtlebot)))
    (==> tb start-sub-camera-depth-image-raw)
    (new-window)
    (for (i 0 100)
      (==> tb update-camera-depth-image-raw)
      (gray-draw-matrix 0 0 :tb:camera-depth-image-raw 0 1023 1 1)
      )
    )
  )

